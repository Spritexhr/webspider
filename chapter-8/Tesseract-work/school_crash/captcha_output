import pytesseract
from PIL import Image
import numpy as np
import re
import time
from retrying import retry
from io import BytesIO
import re
from playwright.sync_api import Playwright, sync_playwright, expect 
import logging
import requests
import base64  


logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(levelname)s : %(message)s")


def preprocess(image_bytes): 
    image = Image.open(image_bytes)
    image = image.convert('L')
    array = np.array(image)
    array = np.where(array < 250, 0, 255)
    image = Image.fromarray(array.astype('uint8'))
    return image

# def ocr_fail():



@retry(stop_max_attempt_number=3, retry_on_result=lambda x: x is False)
def run(playwright: Playwright) -> None:
    browser = playwright.firefox.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    page.goto("https://www.gxmzu.edu.cn/index/VPNycjr.htm")
    with page.expect_popup() as page1_info:
        page.locator("div").filter(has_text=re.compile(r"^WebVPN$")).click()
    
    page1 = page1_info.value
    page1.wait_for_load_state('load')
    page1.get_by_placeholder("请输入您的账号").click()
    page1.get_by_placeholder("请输入您的账号").fill("202313141100520")
    #账号
    page1.get_by_placeholder("请输入密码").click()
    page1.get_by_placeholder("请输入密码").fill("12345678a/")
    #密码
    
    src = page1.get_by_role("img", name="logo").get_attribute('src')
    logging.info('src: %s', src)
    # 移除Base64字符串的头部信息，只保留编码部分  
    base64_data = base64.b64decode(src.split(',')[1])  
    
    # 使用io.BytesIO将解码后的数据转换为文件对象  
    image_bytes = BytesIO(base64_data)  
    
    # image = page.on('response', on_response)
    image = preprocess(image_bytes)
    
    string = pytesseract.image_to_string(image)
    captcha = re.sub(r'[^-+*/()0-9]', '', string)
    logging.info('captcha: %s', captcha)
    page1.get_by_placeholder("算术答案").click()
    page1.get_by_placeholder("算术答案").fill(str(eval(captcha)))
    logging.info('captcha: %s', eval(captcha))
    page1.get_by_role("button", name="登 录").click()
   
    # with page1.expect_popup() as page2_info:
    #     page1.get_by_role("link", name="教务系统").click()
    # page2 = page2_info.value
    # page2.get_by_role("link", name="选课中心").click()


    try:
        page1.wait_for_selector('body > div:nth-child(7) > div > ul > li:nth-child(1) > a > h4')
        time.sleep(10)
        context.close()
        browser.close()
        return True
    except TimeoutError:
        return False

with sync_playwright() as playwright:
    run(playwright)